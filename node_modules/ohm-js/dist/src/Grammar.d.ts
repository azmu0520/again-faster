export = Grammar;
declare function Grammar(name: any, superGrammar: any, rules: any, optDefaultStartRule: any): void;
declare class Grammar {
    constructor(name: any, superGrammar: any, rules: any, optDefaultStartRule: any);
    name: any;
    superGrammar: any;
    rules: any;
    defaultStartRule: any;
    matcher(): Matcher;
    isBuiltIn(): boolean;
    equals(g: any): boolean;
    match(input: any, optStartApplication: any): any;
    trace(input: any, optStartApplication: any): any;
    createSemantics(): {
        (matchResult: any): {
            [x: string]: any;
            _semantics: this;
        };
        addOperation(signature: any, actionDict: any): any;
        extendOperation(name: any, actionDict: any): any;
        addAttribute(name: any, actionDict: any): any;
        extendAttribute(name: any, actionDict: any): any;
        _getActionDict(operationOrAttributeName: any): any;
        _remove(operationOrAttributeName: any): any;
        getOperationNames(): string[];
        getAttributeNames(): string[];
        getGrammar(): any;
        toRecipe(semanticsOnly: any): string;
        toString: any;
        _getSemantics(): Semantics;
    };
    extendSemantics(superSemantics: any): {
        (matchResult: any): {
            [x: string]: any;
            _semantics: this;
        };
        addOperation(signature: any, actionDict: any): any;
        extendOperation(name: any, actionDict: any): any;
        addAttribute(name: any, actionDict: any): any;
        extendAttribute(name: any, actionDict: any): any;
        _getActionDict(operationOrAttributeName: any): any;
        _remove(operationOrAttributeName: any): any;
        getOperationNames(): string[];
        getAttributeNames(): string[];
        getGrammar(): any;
        toRecipe(semanticsOnly: any): string;
        toString: any;
        _getSemantics(): Semantics;
    };
    _checkTopDownActionDict(what: any, name: any, actionDict: any): void;
    _topDownActionArity(actionName: any): any;
    _inheritsFrom(grammar: any): boolean;
    toRecipe(superGrammarExpr?: any): any;
    toOperationActionDictionaryTemplate(): any;
    toAttributeActionDictionaryTemplate(): any;
    _toOperationOrAttributeActionDictionaryTemplate(): any;
    addSemanticActionTemplate(ruleName: any, body: any, sb: any): void;
    parseApplication(str: any): any;
}
declare namespace Grammar {
    export { initApplicationParser, ProtoBuiltInRules };
}
import Matcher = require("./Matcher");
import Semantics = require("./Semantics");
declare function initApplicationParser(grammar: any, builderFn: any): void;
declare var ProtoBuiltInRules: Grammar;
