export class Node {
    constructor(matchLength: any);
    matchLength: any;
    get ctorName(): void;
    numChildren(): any;
    childAt(idx: any): any;
    indexOfChild(arg: any): any;
    hasChildren(): boolean;
    hasNoChildren(): boolean;
    onlyChild(): any;
    firstChild(): any;
    lastChild(): any;
    childBefore(child: any): any;
    childAfter(child: any): any;
    isTerminal(): boolean;
    isNonterminal(): boolean;
    isIteration(): boolean;
    isOptional(): boolean;
}
export class TerminalNode extends Node {
    get ctorName(): string;
    get primitiveValue(): void;
}
export class NonterminalNode extends Node {
    constructor(ruleName: any, children: any, childOffsets: any, matchLength: any);
    ruleName: any;
    children: any;
    childOffsets: any;
    get ctorName(): any;
    isLexical(): boolean;
    isSyntactic(): boolean;
}
export class IterationNode extends Node {
    constructor(children: any, childOffsets: any, matchLength: any, isOptional: any);
    children: any;
    childOffsets: any;
    optional: any;
    get ctorName(): string;
    isOptional(): any;
}
