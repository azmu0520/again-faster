export = Semantics;
declare function Semantics(grammar: any, superSemantics: any): void;
declare class Semantics {
    constructor(grammar: any, superSemantics: any);
    grammar: any;
    checkedActionDicts: boolean;
    Wrapper: {
        new (node: any, sourceInterval: any, baseInterval: any): {
            [x: string]: any;
            _semantics: this;
        };
        [x: string]: any;
    };
    super: any;
    operations: any;
    attributes: any;
    attributeKeys: any;
    toString(): string;
    checkActionDictsIfHaventAlready(): void;
    checkActionDicts(): void;
    toRecipe(semanticsOnly: any): string;
    addOperationOrAttribute(type: any, signature: any, actionDict: any): void;
    extendOperationOrAttribute(type: any, name: any, actionDict: any): void;
    assertNewName(name: any, type: any): void;
    wrap(node: any, source: any, optBaseInterval: any): {
        [x: string]: any;
        _semantics: this;
    };
}
declare namespace Semantics {
    function createSemantics(grammar: any, optSuperSemantics: any): {
        (matchResult: any): {
            [x: string]: any;
            _semantics: this;
        };
        addOperation(signature: any, actionDict: any): any;
        extendOperation(name: any, actionDict: any): any;
        addAttribute(name: any, actionDict: any): any;
        extendAttribute(name: any, actionDict: any): any;
        _getActionDict(operationOrAttributeName: any): any;
        _remove(operationOrAttributeName: any): any;
        getOperationNames(): string[];
        getAttributeNames(): string[];
        getGrammar(): any;
        toRecipe(semanticsOnly: any): string;
        toString: any;
        _getSemantics(): Semantics;
    };
}
