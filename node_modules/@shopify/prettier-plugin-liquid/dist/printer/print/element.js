'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.printElement = void 0;
const prettier_1 = require("prettier");
const utils_1 = require("../../printer/utils");
const tag_1 = require("../../printer/print/tag");
const children_1 = require("../../printer/print/children");
const types_1 = require("../../types");
const { builders: { breakParent, dedentToRoot, group, indent, line, softline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printElement(path, options, print) {
    const node = path.getValue();
    if ((0, utils_1.hasNoCloseMarker)(node)) {
        return [
            group((0, tag_1.printOpeningTag)(path, options, print)),
            ...(0, tag_1.printClosingTag)(node, options),
            (0, tag_1.printClosingTagSuffix)(node, options),
        ];
    }
    if ((0, utils_1.shouldPreserveContent)(node, options) ||
        node.type === types_1.NodeTypes.HtmlRawNode) {
        return [
            (0, tag_1.printOpeningTagPrefix)(node, options),
            group((0, tag_1.printOpeningTag)(path, options, print)),
            ...replaceTextEndOfLine((0, tag_1.getNodeContent)(node, options)),
            ...(0, tag_1.printClosingTag)(node, options),
            (0, tag_1.printClosingTagSuffix)(node, options),
        ];
    }
    const attrGroupId = Symbol('element-attr-group-id');
    const elementGroupId = Symbol('element-group-id');
    const printTag = (doc) => group([
        group((0, tag_1.printOpeningTag)(path, options, print), { id: attrGroupId }),
        doc,
        (0, tag_1.printClosingTag)(node, options),
    ], { id: elementGroupId });
    const printLineBeforeChildren = () => {
        if (node.firstChild.hasLeadingWhitespace &&
            node.firstChild.isLeadingWhitespaceSensitive) {
            return line;
        }
        if (node.firstChild.type === types_1.NodeTypes.TextNode &&
            node.isWhitespaceSensitive &&
            node.isIndentationSensitive) {
            return dedentToRoot(softline);
        }
        return softline;
    };
    const printLineAfterChildren = () => {
        const needsToBorrow = node.next
            ? (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(node.next)
            : (0, tag_1.needsToBorrowLastChildClosingTagEndMarker)(node.parentNode);
        if (needsToBorrow) {
            if (node.lastChild.hasTrailingWhitespace &&
                node.lastChild.isTrailingWhitespaceSensitive) {
                return ' ';
            }
            return '';
        }
        if (node.lastChild.hasTrailingWhitespace &&
            node.lastChild.isTrailingWhitespaceSensitive) {
            return line;
        }
        return softline;
    };
    if (node.children.length === 0) {
        return printTag(node.hasDanglingWhitespace && node.isDanglingWhitespaceSensitive
            ? line
            : '');
    }
    return printTag([
        (0, utils_1.forceBreakContent)(node) ? breakParent : '',
        indent([
            printLineBeforeChildren(),
            (0, children_1.printChildren)(path, options, print, {
                leadingSpaceGroupId: elementGroupId,
                trailingSpaceGroupId: elementGroupId,
            }),
        ]),
        printLineAfterChildren(),
    ]);
}
exports.printElement = printElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByaW50L2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYix1Q0FBNkM7QUFDN0MsMkNBSXlCO0FBQ3pCLDZDQVE2QjtBQUM3Qix1REFBeUQ7QUFDekQsbUNBTWlCO0FBRWpCLE1BQU0sRUFDSixRQUFRLEVBQUUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUN2RSxHQUFHLGNBQUcsQ0FBQztBQUNSLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLGNBQUcsQ0FBQyxLQUFZLENBQUM7QUFFbEQsU0FBZ0IsWUFBWSxDQUMxQixJQUE2QyxFQUM3QyxPQUE0QixFQUM1QixLQUFvQjtJQUVwQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsSUFBSSxJQUFBLHdCQUFnQixFQUFDLElBQUksQ0FBQyxFQUFFO1FBRTFCLE9BQU87WUFDTCxLQUFLLENBQUMsSUFBQSxxQkFBZSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUMsR0FBRyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUNqQyxJQUFBLDJCQUFxQixFQUFDLElBQUksRUFBRSxPQUFPLENBQUM7U0FDckMsQ0FBQztLQUNIO0lBRUQsSUFDRSxJQUFBLDZCQUFxQixFQUFDLElBQUksRUFBRSxPQUFPLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFdBQVcsRUFDbkM7UUFDQSxPQUFPO1lBQ0wsSUFBQSwyQkFBcUIsRUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQ3BDLEtBQUssQ0FBQyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENB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