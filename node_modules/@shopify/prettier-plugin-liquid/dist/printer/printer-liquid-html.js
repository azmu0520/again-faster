"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printerLiquidHtml = void 0;
const prettier_1 = require("prettier");
const types_1 = require("../types");
const utils_1 = require("../utils");
const print_preprocess_1 = require("../printer/print-preprocess");
const utils_2 = require("../printer/utils");
const element_1 = require("../printer/print/element");
const tag_1 = require("../printer/print/tag");
const liquid_1 = require("../printer/print/liquid");
const children_1 = require("../printer/print/children");
const embed_1 = require("../printer/embed");
const parser_1 = require("../parser");
const { builders } = prettier_1.doc;
const { fill, group, hardline, indent, join, line, softline } = builders;
function printAttributes(path, _options, print) {
    const node = path.getValue();
    if ((0, utils_2.isEmpty)(node.attributes))
        return '';
    return group([
        indent([
            line,
            join(line, path.map((p) => print(p), 'attributes')),
        ]),
        softline,
    ], {
        shouldBreak: (0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.start, node.blockStartPosition.end),
    });
}
const oppositeQuotes = {
    '"': "'",
    "'": '"',
};
function printAttribute(path, options, _print) {
    const node = path.getValue();
    const attrGroupId = Symbol('attr-group-id');
    const value = node.source.slice(node.attributePosition.start, node.attributePosition.end);
    const preferredQuote = options.singleQuote ? `'` : `"`;
    const attributeValueContainsQuote = !!node.value.find((valueNode) => (0, utils_2.isTextLikeNode)(valueNode) && valueNode.value.includes(preferredQuote));
    const quote = attributeValueContainsQuote
        ? oppositeQuotes[preferredQuote]
        : preferredQuote;
    return [
        node.name,
        '=',
        quote,
        (0, utils_2.hasLineBreakInRange)(node.source, node.attributePosition.start, node.attributePosition.end)
            ? group([
                indent([
                    softline,
                    join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(value), true)),
                ]),
                softline,
            ], { id: attrGroupId })
            : value,
        quote,
    ];
}
function isYamlFrontMatter(node) {
    return (node.parentNode &&
        node.parentNode.type === types_1.NodeTypes.Document &&
        !node.prev &&
        /^---\r?\n/.test(node.value));
}
function printTextNode(path, options, _print) {
    const node = path.getValue();
    if (isYamlFrontMatter(node))
        return node.value;
    if (node.value.match(/^\s*$/))
        return '';
    const text = node.value;
    const paragraphs = text
        .split(/(\r?\n){2,}/)
        .filter(Boolean)
        .map((curr) => {
        let doc = [];
        const words = curr.trim().split(/\s+/g);
        let isFirst = true;
        for (let j = 0; j < words.length; j++) {
            const word = words[j];
            if (isFirst) {
                isFirst = false;
            }
            else {
                doc.push(line);
            }
            doc.push(word);
        }
        return fill(doc);
    });
    return [
        (0, tag_1.printOpeningTagPrefix)(node, options),
        join(hardline, paragraphs),
        (0, tag_1.printClosingTagSuffix)(node, options),
    ];
}
function printNode(path, options, print, args = {}) {
    const node = path.getValue();
    switch (node.type) {
        case types_1.NodeTypes.Document: {
            return [
                (0, children_1.printChildren)(path, options, print, args),
                hardline,
            ];
        }
        case types_1.NodeTypes.HtmlElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlVoidElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlRawNode: {
            let body = [];
            const hasEmptyBody = node.body.value.trim() === '';
            const shouldIndentBody = node.body.kind !== parser_1.RawMarkupKinds.markdown;
            if (!hasEmptyBody) {
                if (shouldIndentBody) {
                    body = [indent([hardline, path.call(print, 'body')]), hardline];
                }
                else {
                    body = [
                        builders.dedentToRoot([hardline, path.call(print, 'body')]),
                        hardline,
                    ];
                }
            }
            return group([
                group([
                    '<',
                    node.name,
                    printAttributes(path, options, print),
                    '>',
                ]),
                ...body,
                ['</', node.name, '>'],
            ]);
        }
        case types_1.NodeTypes.RawMarkup: {
            const lines = (0, utils_2.bodyLines)(node.value);
            const shouldSkipFirstLine = !node.source[node.position.start].match(/\r|\n/);
            return lines.length > 0 && lines[0].trim() !== ''
                ? join(hardline, (0, utils_2.reindent)(lines, shouldSkipFirstLine))
                : softline;
        }
        case types_1.NodeTypes.LiquidDrop: {
            return (0, liquid_1.printLiquidDrop)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidRawTag: {
            return (0, liquid_1.printLiquidRawTag)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidTag: {
            return (0, liquid_1.printLiquidTag)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (0, liquid_1.printLiquidBranch)(path, options, print, args);
        }
        case types_1.NodeTypes.AttrEmpty: {
            return node.name;
        }
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrDoubleQuoted: {
            return printAttribute(path, options, print);
        }
        case types_1.NodeTypes.HtmlComment: {
            return [
                '<!--',
                group([
                    indent([line, join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(node.body), true))]),
                    line,
                ]),
                '-->',
            ];
        }
        case types_1.NodeTypes.AssignMarkup: {
            return [node.name, ' = ', path.call(print, 'value')];
        }
        case types_1.NodeTypes.CycleMarkup: {
            const doc = [];
            if (node.groupName) {
                doc.push(path.call(print, 'groupName'), ':');
            }
            const whitespace = node.args.length > 1 ? line : ' ';
            doc.push(whitespace, join([',', whitespace], path.map((p) => print(p), 'args')));
            return doc;
        }
        case types_1.NodeTypes.ForMarkup: {
            const doc = [node.variableName, ' in ', path.call(print, 'collection')];
            if (node.reversed) {
                doc.push(line, 'reversed');
            }
            if (node.args.length > 0) {
                doc.push([
                    line,
                    join(line, path.map((p) => print(p), 'args')),
                ]);
            }
            return doc;
        }
        case types_1.NodeTypes.PaginateMarkup: {
            const doc = [
                path.call(print, 'collection'),
                line,
                'by ',
                path.call(print, 'pageSize'),
            ];
            if (node.args.length > 0) {
                doc.push([
                    ',',
                    line,
                    join([',', line], path.map((p) => print(p), 'args')),
                ]);
            }
            return doc;
        }
        case types_1.NodeTypes.RenderMarkup: {
            const snippet = path.call(print, 'snippet');
            const doc = [snippet];
            if (node.variable) {
                const whitespace = node.alias ? line : ' ';
                doc.push(whitespace, path.call(print, 'variable'));
            }
            if (node.alias) {
                doc.push(' ', 'as', ' ', node.alias);
            }
            if (node.args.length > 0) {
                doc.push(',', line, join([',', line], path.map((p) => print(p), 'args')));
            }
            return doc;
        }
        case types_1.NodeTypes.RenderVariableExpression: {
            return [node.kind, ' ', path.call(print, 'name')];
        }
        case types_1.NodeTypes.LogicalExpression: {
            return [
                path.call(print, 'left'),
                line,
                node.relation,
                ' ',
                path.call(print, 'right'),
            ];
        }
        case types_1.NodeTypes.Comparison: {
            return group([
                path.call(print, 'left'),
                indent([line, node.comparator, ' ', path.call(print, 'right')]),
            ]);
        }
        case types_1.NodeTypes.LiquidVariable: {
            const name = path.call(print, 'expression');
            let filters = '';
            if (node.filters.length > 0) {
                filters = [
                    line,
                    join(line, path.map((p) => print(p), 'filters')),
                ];
            }
            return [name, filters];
        }
        case types_1.NodeTypes.LiquidFilter: {
            let args = [];
            if (node.args.length > 0) {
                const printed = path.map((p) => print(p), 'args');
                const shouldPrintFirstArgumentSameLine = node.args[0].type !== types_1.NodeTypes.NamedArgument;
                if (shouldPrintFirstArgumentSameLine) {
                    const [firstDoc, ...rest] = printed;
                    const restDoc = (0, utils_2.isEmpty)(rest)
                        ? ''
                        : indent([',', line, join([',', line], rest)]);
                    args = [': ', firstDoc, restDoc];
                }
                else {
                    args = [':', indent([line, join([',', line], printed)])];
                }
            }
            return group(['| ', node.name, ...args]);
        }
        case types_1.NodeTypes.NamedArgument: {
            return [node.name, ': ', path.call(print, 'value')];
        }
        case types_1.NodeTypes.TextNode: {
            return printTextNode(path, options, print);
        }
        case types_1.NodeTypes.YAMLFrontmatter: {
            return ['---', hardline, node.body, '---'];
        }
        case types_1.NodeTypes.String: {
            const preferredQuote = options.liquidSingleQuote ? `'` : `"`;
            const valueHasQuotes = node.value.includes(preferredQuote);
            const quote = valueHasQuotes
                ? oppositeQuotes[preferredQuote]
                : preferredQuote;
            return [quote, node.value, quote];
        }
        case types_1.NodeTypes.Number: {
            if (args.truncate) {
                return node.value.replace(/\.\d+$/, '');
            }
            else {
                return node.value;
            }
        }
        case types_1.NodeTypes.Range: {
            return [
                '(',
                path.call((p) => print(p, { truncate: true }), 'start'),
                '..',
                path.call((p) => print(p, { truncate: true }), 'end'),
                ')',
            ];
        }
        case types_1.NodeTypes.LiquidLiteral: {
            if (node.keyword === 'nil') {
                return 'null';
            }
            return node.keyword;
        }
        case types_1.NodeTypes.VariableLookup: {
            const doc = [];
            if (node.name) {
                doc.push(node.name);
            }
            const lookups = path.map((lookupPath, index) => {
                const lookup = lookupPath.getValue();
                switch (lookup.type) {
                    case types_1.NodeTypes.String: {
                        const value = lookup.value;
                        const isGlobalStringLookup = index === 0 && !node.name;
                        if (!isGlobalStringLookup && /^[a-z0-9_]+\??$/i.test(value)) {
                            return ['.', value];
                        }
                        return ['[', print(lookupPath), ']'];
                    }
                    default: {
                        return ['[', print(lookupPath), ']'];
                    }
                }
            }, 'lookups');
            return [...doc, ...lookups];
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
const ignoredKeys = new Set([
    'prev',
    'parentNode',
    'next',
    'firstChild',
    'lastChild',
]);
exports.printerLiquidHtml = {
    print: printNode,
    embed: embed_1.embed,
    preprocess: print_preprocess_1.preprocess,
    getVisitorKeys(node, nonTraversableKeys) {
        return Object.keys(node).filter((key) => !nonTraversableKeys.has(key) && !ignoredKeys.has(key));
    },
};
//# sourceMappingURL=data:application/json;base64,